Пакеты, переменные и функции.
Изучите основные компоненты любой программы на Go.

Авторы Go
https://golang.org

* Пакеты

Каждая программа на Go состоит из пакетов.

Программы начинают выполнение в пакете `main`.

Эта программа использует пакеты с путями импорта `"fmt"` и `"math/rand"`.

По соглашению, имя пакета совпадает с последним элементом пути импорта. Например, пакет `"math/rand"` состоит из файлов, которые начинаются с оператора `package`rand`.

.play basics/packages.go

* Импорт

Этот код группирует импорты в скобочный, "факторизованный" оператор импорта.

Вы также можете написать несколько операторов импорта, например:

	import "fmt"
	import "math"

Но хорошим стилем считается использование факторизованного оператора импорта.

.play basics/imports.go

* Экспортируемые имена

В Go имя экспортируется, если оно начинается с заглавной буквы.
Например, `Pizza` - это экспортируемое имя, как и `Pi`, которое экспортируется из пакета `math`.

`pizza` и `pi` не начинаются с заглавной буквы, поэтому они не экспортируются.

При импорте пакета вы можете обращаться только к его экспортируемым именам.
Любые "неэкспортируемые" имена недоступны извне пакета.

Запустите код. Обратите внимание на сообщение об ошибке.

Чтобы исправить ошибку, переименуйте `math.pi` в `math.Pi` и попробуйте снова.

.play basics/exported-names.go

* Функции

Функция может принимать ноль или более аргументов.

В этом примере `add` принимает два параметра типа `int`.

Обратите внимание, что тип указывается _после_ имени переменной.

(Подробнее о том, почему типы выглядят именно так, читайте в [[https://blog.golang.org/gos-declaration-syntax][статье о синтаксисе объявлений в Go]].)

.play basics/functions.go

* Функции (продолжение)

Когда два или более последовательных именованных параметра функции имеют один и тот же тип, вы можете опустить тип для всех, кроме последнего.

В этом примере мы сократили

	x int, y int

до

	x, y int

.play basics/functions-continued.go

* Множественные результаты

Функция может возвращать любое количество результатов.

Функция `swap` возвращает две строки.

.play basics/multiple-results.go

* Именованные возвращаемые значения

Возвращаемые значения в Go могут быть именованными. В этом случае они рассматриваются как переменные, определенные в начале функции.

Эти имена следует использовать для документирования значения возвращаемых результатов.

Оператор `return` без аргументов возвращает именованные возвращаемые значения. Это известно как "naked" return.

naked операторы return следует использовать только в коротких функциях, как в приведенном здесь примере. Они могут ухудшить читаемость в более длинных функциях.

.play basics/named-results.go

* Переменные

Оператор `var` объявляет список переменных; как и в списках аргументов функций, тип указывается последним.

Оператор `var` может быть на уровне пакета или функции. В этом примере мы видим оба варианта.

.play basics/variables.go

* Переменные с инициализаторами

Объявление var может включать инициализаторы, по одному на переменную.

Если инициализатор присутствует, тип можно опустить; переменная примет тип инициализатора.

.play basics/variables-with-initializers.go

* Краткие объявления переменных

Внутри функции можно использовать краткий оператор присваивания `:=` вместо объявления `var` с неявным типом.

Вне функции каждый оператор начинается с ключевого слова (`var`, `func` и т.д.), поэтому конструкция `:=` недоступна.

.play basics/short-variable-declarations.go

* Базовые типы

Базовые типы Go:

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // псевдоним для uint8

	rune // псевдоним для int32
	     // представляет код символа Unicode

	float32 float64

	complex64 complex128

Пример показывает переменные нескольких типов,
а также то, что объявления переменных могут быть "факторизованы" в блоки,
как и операторы импорта.

Типы `int`, `uint` и `uintptr` обычно имеют ширину 32 бита на 32-битных системах и 64 бита на 64-битных системах.
Когда вам нужно целочисленное значение, следует использовать `int`, если у вас нет конкретной причины использовать целочисленный тип определенного размера или беззнаковый целочисленный тип.

.play basics/basic-types.go

* Нулевые значения

Переменным, объявленным без явного начального значения, присваивается их
_нулевое_ значение.

Нулевое значение:

- `0` для числовых типов,
- `false` для логического типа, и
- `""` (пустая строка) для строк.

.play basics/zero.go

* Преобразование типов

Выражение `T(v)` преобразует значение `v` в тип `T`.

Некоторые числовые преобразования:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Или, проще говоря:

	i := 42
	f := float64(i)
	u := uint(f)

В отличие от C, в Go присваивание между элементами разных типов требует явного преобразования.
Попробуйте удалить преобразования `float64` или `uint` в примере и посмотрите, что произойдет.

.play basics/type-conversions.go

* Вывод типов

При объявлении переменной без указания явного типа (либо с использованием синтаксиса `:=`, либо синтаксиса выражения `var`=`), тип переменной выводится из значения в правой части.

Когда правая часть объявления имеет тип, новая переменная имеет тот же тип:

	var i int
	j := i // j это int

Но когда правая часть содержит нетипизированную числовую константу, новая переменная может быть `int`, `float64` или `complex128` в зависимости от точности константы:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Попробуйте изменить начальное значение `v` в примере кода и наблюдайте, как это влияет на его тип.

.play basics/type-inference.go

* Константы

Константы объявляются как переменные, но с ключевым словом `const`.

Константы могут быть символьными, строковыми, логическими или числовыми значениями.

Константы нельзя объявлять с использованием синтаксиса `:=`.

.play basics/constants.go

* Числовые константы

Числовые константы - это значения _высокой точности_.

Нетипизированная константа принимает тип, необходимый по контексту.

Попробуйте также вывести `needInt(Big)`.

(Тип `int` может хранить максимум 64-битное целое число, а иногда и меньше.)

.play basics/numeric-constants.go

* Поздравляем!

Вы закончили этот урок!

Вы можете вернуться к списку [[/list][модулей]], чтобы узнать, что изучать дальше, или продолжить со [[javascript:click('.next-page')][следующим уроком]].
