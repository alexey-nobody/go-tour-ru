Параллелизм
Go предоставляет конструкции параллелизма как часть основного языка. Этот урок представляет их и приводит некоторые примеры их использования.

Авторы Go
https://golang.org

* Горутины

_Горутина_ - это легковесный поток, управляемый средой выполнения Go.

	go f(x, y, z)

запускает новую горутину, выполняющую

	f(x, y, z)

Вычисление `f`, `x`, `y` и `z` происходит в текущей горутине, а выполнение `f` происходит в новой горутине.

Горутины выполняются в одном адресном пространстве, поэтому доступ к общей памяти должен быть синхронизирован. Пакет [[https://golang.org/pkg/sync/][`sync`]] предоставляет полезные примитивы, хотя в Go они вам особо не понадобятся, так как есть другие примитивы. (См. следующий слайд.)

.play concurrency/goroutines.go

* Каналы

Каналы - это типизированный проводник, через который вы можете отправлять и получать значения с помощью оператора канала, `<-`.

	ch <- v    // Отправить v в канал ch.
	v := <-ch  // Получить из ch и
	           // присвоить значение v.

(Данные движутся в направлении стрелки.)

Как и карты (maps) и срезы (slices), каналы должны быть созданы перед использованием:

	ch := make(chan int)

По умолчанию отправка и получение блокируются до тех пор, пока другая сторона не будет готова. Это позволяет горутинам синхронизироваться без явных блокировок или условных переменных.

Пример кода суммирует числа в срезе, распределяя работу между двумя горутинами.
Как только обе горутины завершат свои вычисления, он вычисляет окончательный результат.

.play concurrency/channels.go

* Буферизованные каналы

Каналы могут быть _буферизованными_. Укажите длину буфера в качестве второго аргумента для `make`, чтобы инициализировать буферизованный канал:

	ch := make(chan int, 100)

Отправка в буферизованный канал блокируется только тогда, когда буфер заполнен. Получение блокируется, когда буфер пуст.

Измените пример, чтобы переполнить буфер, и посмотрите, что произойдет.

.play concurrency/buffered-channels.go

* Range и Close

Отправитель может `close` (закрыть) канал, чтобы указать, что больше значений не будет отправлено. Получатели могут проверить, был ли канал закрыт, присвоив второй параметр выражению получения: после

	v, ok := <-ch

`ok` будет `false`, если больше нет значений для получения и канал закрыт.

Цикл `for`i`:=`range`c` получает значения из канала многократно, пока он не будет закрыт.

*Примечание:* Только отправитель должен закрывать канал, никогда получатель. Отправка в закрытый канал вызовет панику.

*Еще*одно*примечание:* Каналы не похожи на файлы; обычно вам не нужно их закрывать. Закрытие необходимо только тогда, когда получателю нужно сообщить, что больше значений не поступит, например, для завершения цикла `range`.

.play concurrency/range-and-close.go

* Select

Оператор `select` позволяет горутине ожидать несколько операций связи.

`select` блокируется до тех пор, пока один из его вариантов не сможет выполниться, затем он выполняет этот вариант. Если готовы несколько вариантов, он выбирает один из них случайным образом.

.play concurrency/select.go

* Выбор по умолчанию

Вариант `default` в `select` выполняется, если ни один другой вариант не готов.

Используйте вариант `default` для попытки отправки или получения без блокировки:

	select {
	case i := <-c:
		// использовать i
	default:
		// получение из c заблокировало бы
	}

.play concurrency/default-selection.go

* Упражнение: Эквивалентные бинарные деревья

Может быть много различных бинарных деревьев с одинаковой последовательностью хранящихся в них значений. Например, вот два бинарных дерева, хранящих последовательность 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Функция для проверки того, хранят ли два бинарных дерева одинаковую последовательность, довольно сложна в большинстве языков. Мы будем использовать параллелизм и каналы Go для написания простого решения.

В этом примере используется пакет `tree`, который определяет тип:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


Продолжение описания на [[javascript:click('.next-page')][следующей странице]].

* Упражнение: Эквивалентные бинарные деревья

*1.* Реализуйте функцию `Walk`.

*2.* Протестируйте функцию `Walk`.

Функция `tree.New(k)` создает случайно структурированное (но всегда отсортированное) бинарное дерево, содержащее значения `k`, `2k`, `3k`, ..., `10k`.

Создайте новый канал `ch` и запустите обходчик:

	go Walk(tree.New(1), ch)

Затем прочитайте и выведите 10 значений из канала. Это должны быть числа 1, 2, 3, ..., 10.

*3.* Реализуйте функцию `Same`, используя `Walk` для определения, хранят ли `t1` и `t2` одинаковые значения.

*4.* Протестируйте функцию `Same`.

`Same(tree.New(1),`tree.New(1))` должно вернуть true, а `Same(tree.New(1),`tree.New(2))` должно вернуть false.

Документацию для `Tree` можно найти [[https://godoc.org/golang.org/x/tour/tree#Tree][здесь]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Мы видели, как каналы отлично подходят для коммуникации между горутинами.

Но что, если нам не нужна коммуникация? Что, если мы просто хотим убедиться, что только
одна горутина может получить доступ к переменной одновременно, чтобы избежать конфликтов?

Эта концепция называется _взаимным_исключением_, и традиционное название для структуры данных, которая его обеспечивает, - _мьютекс_.

Стандартная библиотека Go обеспечивает взаимное исключение с помощью
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] и его двух методов:

- `Lock`
- `Unlock`

Мы можем определить блок кода для выполнения во взаимном исключении, окружив его
вызовами `Lock` и `Unlock`, как показано в методе `Inc`.

Мы также можем использовать `defer` для обеспечения разблокировки мьютекса, как в методе `Value`.

.play concurrency/mutex-counter.go

* Упражнение: Веб-краулер

В этом упражнении вы будете использовать возможности параллелизма Go для распараллеливания веб-краулера.

Измените функцию `Crawl`, чтобы она получала URL-адреса параллельно, не получая один и тот же URL дважды.

_Подсказка_: вы можете хранить кэш уже полученных URL-адресов в карте, но одних только карт недостаточно
для безопасного параллельного использования!

.play concurrency/exercise-web-crawler.go

* Куда двигаться дальше...

#appengine: Вы можете начать с
#appengine: [[https://golang.org/dl/][установки Go]].

#appengine: После установки Go,
[[https://golang.org/doc/][Документация Go]] - отличное место для
#appengine: продолжения.
начала.
Она содержит справочники, руководства, видео и многое другое.

Чтобы узнать, как организовывать и работать с кодом Go, прочитайте [[https://golang.org/doc/code][Как писать код на Go]].

Если вам нужна помощь со стандартной библиотекой, см. [[https://golang.org/pkg/][справочник по пакетам]]. Для помощи с самим языком, вы можете удивиться, обнаружив, что [[https://golang.org/ref/spec][Спецификация языка]] вполне читабельна.

Чтобы глубже изучить модель параллелизма Go, посмотрите
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Шаблоны параллелизма Go]]
([[https://talks.golang.org/2012/concurrency.slide][слайды]])
и
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Продвинутые шаблоны параллелизма Go]]
([[https://talks.golang.org/2013/advconc.slide][слайды]])
и прочитайте
[[https://golang.org/doc/codewalk/sharemem/][Разделяйте память через коммуникацию]]
codewalk.

Чтобы начать писать веб-приложения, посмотрите
[[https://vimeo.com/53221558][Простая среда программирования]]
([[https://talks.golang.org/2012/simple.slide][слайды]])
и прочитайте руководство
[[https://golang.org/doc/articles/wiki/][Написание веб-приложений]].

Codewalk [[https://golang.org/doc/codewalk/functions/][Функции первого класса в Go]] дает интересную перспективу на функциональные типы Go.

[[https://blog.golang.org/][Блог Go]] имеет большой архив информативных статей о Go.

Посетите [[https://golang.org][golang.org]] для получения дополнительной информации.

